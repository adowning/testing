schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

# columns and relationships of "message"
type message {
  id: uuid!
  text: String!
  timestamp: timestamptz!
  username: String!
}

# aggregated selection of "message"
type message_aggregate {
  aggregate: message_aggregate_fields
  nodes: [message!]!
}

# aggregate fields of "message"
type message_aggregate_fields {
  count(columns: [message_select_column!], distinct: Boolean): Int
  max: message_max_fields
  min: message_min_fields
}

# order by aggregate values of table "message"
input message_aggregate_order_by {
  count: order_by
  max: message_max_order_by
  min: message_min_order_by
}

# input type for inserting array relation for remote table "message"
input message_arr_rel_insert_input {
  data: [message_insert_input!]!
  on_conflict: message_on_conflict
}

# Boolean expression to filter rows from the table "message". All fields are combined with a logical 'AND'.
input message_bool_exp {
  _and: [message_bool_exp]
  _not: message_bool_exp
  _or: [message_bool_exp]
  id: uuid_comparison_exp
  text: String_comparison_exp
  timestamp: timestamptz_comparison_exp
  username: String_comparison_exp
}

# unique or primary key constraints on table "message"
enum message_constraint {
  # unique or primary key constraint
  message_pkey
}

# input type for inserting data into table "message"
input message_insert_input {
  id: uuid
  text: String
  timestamp: timestamptz
  username: String
}

# aggregate max on columns
type message_max_fields {
  id: uuid
  text: String
  timestamp: timestamptz
  username: String
}

# order by max() on columns of table "message"
input message_max_order_by {
  id: order_by
  text: order_by
  timestamp: order_by
  username: order_by
}

# aggregate min on columns
type message_min_fields {
  id: uuid
  text: String
  timestamp: timestamptz
  username: String
}

# order by min() on columns of table "message"
input message_min_order_by {
  id: order_by
  text: order_by
  timestamp: order_by
  username: order_by
}

# response of any mutation on the table "message"
type message_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [message!]!
}

# input type for inserting object relation for remote table "message"
input message_obj_rel_insert_input {
  data: message_insert_input!
  on_conflict: message_on_conflict
}

# on conflict condition type for table "message"
input message_on_conflict {
  constraint: message_constraint!
  update_columns: [message_update_column!]!
  where: message_bool_exp
}

# ordering options when selecting data from "message"
input message_order_by {
  id: order_by
  text: order_by
  timestamp: order_by
  username: order_by
}

# primary key columns input for table: "message"
input message_pk_columns_input {
  id: uuid!
}

# select columns of table "message"
enum message_select_column {
  # column name
  id

  # column name
  text

  # column name
  timestamp

  # column name
  username
}

# input type for updating data in table "message"
input message_set_input {
  id: uuid
  text: String
  timestamp: timestamptz
  username: String
}

# update columns of table "message"
enum message_update_column {
  # column name
  id

  # column name
  text

  # column name
  timestamp

  # column name
  username
}

# mutation root
type mutation_root {
  # delete data from the table: "message"
  delete_message(
    # filter the rows which have to be deleted
    where: message_bool_exp!
  ): message_mutation_response

  # delete single row from the table: "message"
  delete_message_by_pk(id: uuid!): message

  # delete data from the table: "user"
  delete_user(
    # filter the rows which have to be deleted
    where: user_bool_exp!
  ): user_mutation_response

  # delete single row from the table: "user"
  delete_user_by_pk(id: uuid!): user

  # delete data from the table: "user_online"
  delete_user_online(
    # filter the rows which have to be deleted
    where: user_online_bool_exp!
  ): user_online_mutation_response

  # delete data from the table: "user_typing"
  delete_user_typing(
    # filter the rows which have to be deleted
    where: user_typing_bool_exp!
  ): user_typing_mutation_response

  # insert data into the table: "message"
  insert_message(
    # the rows to be inserted
    objects: [message_insert_input!]!

    # on conflict condition
    on_conflict: message_on_conflict
  ): message_mutation_response

  # insert a single row into the table: "message"
  insert_message_one(
    # the row to be inserted
    object: message_insert_input!

    # on conflict condition
    on_conflict: message_on_conflict
  ): message

  # insert data into the table: "user"
  insert_user(
    # the rows to be inserted
    objects: [user_insert_input!]!

    # on conflict condition
    on_conflict: user_on_conflict
  ): user_mutation_response

  # insert a single row into the table: "user"
  insert_user_one(
    # the row to be inserted
    object: user_insert_input!

    # on conflict condition
    on_conflict: user_on_conflict
  ): user

  # insert data into the table: "user_online"
  insert_user_online(
    # the rows to be inserted
    objects: [user_online_insert_input!]!
  ): user_online_mutation_response

  # insert a single row into the table: "user_online"
  insert_user_online_one(
    # the row to be inserted
    object: user_online_insert_input!
  ): user_online

  # insert data into the table: "user_typing"
  insert_user_typing(
    # the rows to be inserted
    objects: [user_typing_insert_input!]!
  ): user_typing_mutation_response

  # insert a single row into the table: "user_typing"
  insert_user_typing_one(
    # the row to be inserted
    object: user_typing_insert_input!
  ): user_typing

  # update data of the table: "message"
  update_message(
    # sets the columns of the filtered rows to the given values
    _set: message_set_input

    # filter the rows which have to be updated
    where: message_bool_exp!
  ): message_mutation_response

  # update single row of the table: "message"
  update_message_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: message_set_input
    pk_columns: message_pk_columns_input!
  ): message

  # update data of the table: "user"
  update_user(
    # sets the columns of the filtered rows to the given values
    _set: user_set_input

    # filter the rows which have to be updated
    where: user_bool_exp!
  ): user_mutation_response

  # update single row of the table: "user"
  update_user_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user

  # update data of the table: "user_online"
  update_user_online(
    # sets the columns of the filtered rows to the given values
    _set: user_online_set_input

    # filter the rows which have to be updated
    where: user_online_bool_exp!
  ): user_online_mutation_response

  # update data of the table: "user_typing"
  update_user_typing(
    # sets the columns of the filtered rows to the given values
    _set: user_typing_set_input

    # filter the rows which have to be updated
    where: user_typing_bool_exp!
  ): user_typing_mutation_response
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# query root
type query_root {
  # fetch data from the table: "message"
  message(
    # distinct select on columns
    distinct_on: [message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [message_order_by!]

    # filter the rows returned
    where: message_bool_exp
  ): [message!]!

  # fetch aggregated fields from the table: "message"
  message_aggregate(
    # distinct select on columns
    distinct_on: [message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [message_order_by!]

    # filter the rows returned
    where: message_bool_exp
  ): message_aggregate!

  # fetch data from the table: "message" using primary key columns
  message_by_pk(id: uuid!): message

  # fetch data from the table: "user"
  user(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): [user!]!

  # fetch aggregated fields from the table: "user"
  user_aggregate(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): user_aggregate!

  # fetch data from the table: "user" using primary key columns
  user_by_pk(id: uuid!): user

  # fetch data from the table: "user_online"
  user_online(
    # distinct select on columns
    distinct_on: [user_online_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_online_order_by!]

    # filter the rows returned
    where: user_online_bool_exp
  ): [user_online!]!

  # fetch aggregated fields from the table: "user_online"
  user_online_aggregate(
    # distinct select on columns
    distinct_on: [user_online_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_online_order_by!]

    # filter the rows returned
    where: user_online_bool_exp
  ): user_online_aggregate!

  # fetch data from the table: "user_typing"
  user_typing(
    # distinct select on columns
    distinct_on: [user_typing_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_typing_order_by!]

    # filter the rows returned
    where: user_typing_bool_exp
  ): [user_typing!]!

  # fetch aggregated fields from the table: "user_typing"
  user_typing_aggregate(
    # distinct select on columns
    distinct_on: [user_typing_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_typing_order_by!]

    # filter the rows returned
    where: user_typing_bool_exp
  ): user_typing_aggregate!
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  # fetch data from the table: "message"
  message(
    # distinct select on columns
    distinct_on: [message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [message_order_by!]

    # filter the rows returned
    where: message_bool_exp
  ): [message!]!

  # fetch aggregated fields from the table: "message"
  message_aggregate(
    # distinct select on columns
    distinct_on: [message_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [message_order_by!]

    # filter the rows returned
    where: message_bool_exp
  ): message_aggregate!

  # fetch data from the table: "message" using primary key columns
  message_by_pk(id: uuid!): message

  # fetch data from the table: "user"
  user(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): [user!]!

  # fetch aggregated fields from the table: "user"
  user_aggregate(
    # distinct select on columns
    distinct_on: [user_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_order_by!]

    # filter the rows returned
    where: user_bool_exp
  ): user_aggregate!

  # fetch data from the table: "user" using primary key columns
  user_by_pk(id: uuid!): user

  # fetch data from the table: "user_online"
  user_online(
    # distinct select on columns
    distinct_on: [user_online_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_online_order_by!]

    # filter the rows returned
    where: user_online_bool_exp
  ): [user_online!]!

  # fetch aggregated fields from the table: "user_online"
  user_online_aggregate(
    # distinct select on columns
    distinct_on: [user_online_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_online_order_by!]

    # filter the rows returned
    where: user_online_bool_exp
  ): user_online_aggregate!

  # fetch data from the table: "user_typing"
  user_typing(
    # distinct select on columns
    distinct_on: [user_typing_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_typing_order_by!]

    # filter the rows returned
    where: user_typing_bool_exp
  ): [user_typing!]!

  # fetch aggregated fields from the table: "user_typing"
  user_typing_aggregate(
    # distinct select on columns
    distinct_on: [user_typing_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [user_typing_order_by!]

    # filter the rows returned
    where: user_typing_bool_exp
  ): user_typing_aggregate!
}

scalar timestamptz

# expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

# columns and relationships of "user"
type user {
  id: uuid!
  last_seen: timestamptz
  last_typed: timestamptz
  username: String!
}

# aggregated selection of "user"
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

# aggregate fields of "user"
type user_aggregate_fields {
  count(columns: [user_select_column!], distinct: Boolean): Int
  max: user_max_fields
  min: user_min_fields
}

# order by aggregate values of table "user"
input user_aggregate_order_by {
  count: order_by
  max: user_max_order_by
  min: user_min_order_by
}

# input type for inserting array relation for remote table "user"
input user_arr_rel_insert_input {
  data: [user_insert_input!]!
  on_conflict: user_on_conflict
}

# Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
input user_bool_exp {
  _and: [user_bool_exp]
  _not: user_bool_exp
  _or: [user_bool_exp]
  id: uuid_comparison_exp
  last_seen: timestamptz_comparison_exp
  last_typed: timestamptz_comparison_exp
  username: String_comparison_exp
}

# unique or primary key constraints on table "user"
enum user_constraint {
  # unique or primary key constraint
  user_pkey

  # unique or primary key constraint
  user_username_key
}

# input type for inserting data into table "user"
input user_insert_input {
  id: uuid
  last_seen: timestamptz
  last_typed: timestamptz
  username: String
}

# aggregate max on columns
type user_max_fields {
  id: uuid
  last_seen: timestamptz
  last_typed: timestamptz
  username: String
}

# order by max() on columns of table "user"
input user_max_order_by {
  id: order_by
  last_seen: order_by
  last_typed: order_by
  username: order_by
}

# aggregate min on columns
type user_min_fields {
  id: uuid
  last_seen: timestamptz
  last_typed: timestamptz
  username: String
}

# order by min() on columns of table "user"
input user_min_order_by {
  id: order_by
  last_seen: order_by
  last_typed: order_by
  username: order_by
}

# response of any mutation on the table "user"
type user_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [user!]!
}

# input type for inserting object relation for remote table "user"
input user_obj_rel_insert_input {
  data: user_insert_input!
  on_conflict: user_on_conflict
}

# on conflict condition type for table "user"
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]!
  where: user_bool_exp
}

# columns and relationships of "user_online"
type user_online {
  id: uuid
  last_seen: timestamptz
  last_typed: timestamptz
  username: String
}

# aggregated selection of "user_online"
type user_online_aggregate {
  aggregate: user_online_aggregate_fields
  nodes: [user_online!]!
}

# aggregate fields of "user_online"
type user_online_aggregate_fields {
  count(columns: [user_online_select_column!], distinct: Boolean): Int
  max: user_online_max_fields
  min: user_online_min_fields
}

# order by aggregate values of table "user_online"
input user_online_aggregate_order_by {
  count: order_by
  max: user_online_max_order_by
  min: user_online_min_order_by
}

# input type for inserting array relation for remote table "user_online"
input user_online_arr_rel_insert_input {
  data: [user_online_insert_input!]!
}

# Boolean expression to filter rows from the table "user_online". All fields are combined with a logical 'AND'.
input user_online_bool_exp {
  _and: [user_online_bool_exp]
  _not: user_online_bool_exp
  _or: [user_online_bool_exp]
  id: uuid_comparison_exp
  last_seen: timestamptz_comparison_exp
  last_typed: timestamptz_comparison_exp
  username: String_comparison_exp
}

# input type for inserting data into table "user_online"
input user_online_insert_input {
  id: uuid
  last_seen: timestamptz
  last_typed: timestamptz
  username: String
}

# aggregate max on columns
type user_online_max_fields {
  id: uuid
  last_seen: timestamptz
  last_typed: timestamptz
  username: String
}

# order by max() on columns of table "user_online"
input user_online_max_order_by {
  id: order_by
  last_seen: order_by
  last_typed: order_by
  username: order_by
}

# aggregate min on columns
type user_online_min_fields {
  id: uuid
  last_seen: timestamptz
  last_typed: timestamptz
  username: String
}

# order by min() on columns of table "user_online"
input user_online_min_order_by {
  id: order_by
  last_seen: order_by
  last_typed: order_by
  username: order_by
}

# response of any mutation on the table "user_online"
type user_online_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [user_online!]!
}

# input type for inserting object relation for remote table "user_online"
input user_online_obj_rel_insert_input {
  data: user_online_insert_input!
}

# ordering options when selecting data from "user_online"
input user_online_order_by {
  id: order_by
  last_seen: order_by
  last_typed: order_by
  username: order_by
}

# select columns of table "user_online"
enum user_online_select_column {
  # column name
  id

  # column name
  last_seen

  # column name
  last_typed

  # column name
  username
}

# input type for updating data in table "user_online"
input user_online_set_input {
  id: uuid
  last_seen: timestamptz
  last_typed: timestamptz
  username: String
}

# ordering options when selecting data from "user"
input user_order_by {
  id: order_by
  last_seen: order_by
  last_typed: order_by
  username: order_by
}

# primary key columns input for table: "user"
input user_pk_columns_input {
  id: uuid!
}

# select columns of table "user"
enum user_select_column {
  # column name
  id

  # column name
  last_seen

  # column name
  last_typed

  # column name
  username
}

# input type for updating data in table "user"
input user_set_input {
  id: uuid
  last_seen: timestamptz
  last_typed: timestamptz
  username: String
}

# columns and relationships of "user_typing"
type user_typing {
  id: uuid
  last_seen: timestamptz
  last_typed: timestamptz
  username: String
}

# aggregated selection of "user_typing"
type user_typing_aggregate {
  aggregate: user_typing_aggregate_fields
  nodes: [user_typing!]!
}

# aggregate fields of "user_typing"
type user_typing_aggregate_fields {
  count(columns: [user_typing_select_column!], distinct: Boolean): Int
  max: user_typing_max_fields
  min: user_typing_min_fields
}

# order by aggregate values of table "user_typing"
input user_typing_aggregate_order_by {
  count: order_by
  max: user_typing_max_order_by
  min: user_typing_min_order_by
}

# input type for inserting array relation for remote table "user_typing"
input user_typing_arr_rel_insert_input {
  data: [user_typing_insert_input!]!
}

# Boolean expression to filter rows from the table "user_typing". All fields are combined with a logical 'AND'.
input user_typing_bool_exp {
  _and: [user_typing_bool_exp]
  _not: user_typing_bool_exp
  _or: [user_typing_bool_exp]
  id: uuid_comparison_exp
  last_seen: timestamptz_comparison_exp
  last_typed: timestamptz_comparison_exp
  username: String_comparison_exp
}

# input type for inserting data into table "user_typing"
input user_typing_insert_input {
  id: uuid
  last_seen: timestamptz
  last_typed: timestamptz
  username: String
}

# aggregate max on columns
type user_typing_max_fields {
  id: uuid
  last_seen: timestamptz
  last_typed: timestamptz
  username: String
}

# order by max() on columns of table "user_typing"
input user_typing_max_order_by {
  id: order_by
  last_seen: order_by
  last_typed: order_by
  username: order_by
}

# aggregate min on columns
type user_typing_min_fields {
  id: uuid
  last_seen: timestamptz
  last_typed: timestamptz
  username: String
}

# order by min() on columns of table "user_typing"
input user_typing_min_order_by {
  id: order_by
  last_seen: order_by
  last_typed: order_by
  username: order_by
}

# response of any mutation on the table "user_typing"
type user_typing_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [user_typing!]!
}

# input type for inserting object relation for remote table "user_typing"
input user_typing_obj_rel_insert_input {
  data: user_typing_insert_input!
}

# ordering options when selecting data from "user_typing"
input user_typing_order_by {
  id: order_by
  last_seen: order_by
  last_typed: order_by
  username: order_by
}

# select columns of table "user_typing"
enum user_typing_select_column {
  # column name
  id

  # column name
  last_seen

  # column name
  last_typed

  # column name
  username
}

# input type for updating data in table "user_typing"
input user_typing_set_input {
  id: uuid
  last_seen: timestamptz
  last_typed: timestamptz
  username: String
}

# update columns of table "user"
enum user_update_column {
  # column name
  id

  # column name
  last_seen

  # column name
  last_typed

  # column name
  username
}

scalar uuid

# expression to compare columns of type uuid. All fields are combined with logical 'AND'.
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

